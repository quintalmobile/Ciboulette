#!/bin/bash
#
#	Ciboulette una red social 100% libre, descentralizada y entre pares
#	version 0.3
#	AGPLv3+ © bazza
#

# eso se usa para correrlo en rc.local
if [ "$1" == "iptables" ]; then
	VERSION=$(tor --version | sed 's/(.*$//g; s/[^0-9]//g; s/^0//g; s/\(..\).*/\1/g')
	# no lo usa, si la version de tor es vieja
	[ "$VERSION" -lt "24" ] && exit

	iptables -t nat -A OUTPUT -p udp -m udp --dport 53 -j REDIRECT --to-ports 5300
	iptables -t nat -A PREROUTING -p tcp -d 10.192.0.0/11 -j REDIRECT --to-port 9040
	iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/11 -j REDIRECT --to-port 9040
	exit
fi

export NOMBRE="ciboulette"
export CARPETA=~/.${NOMBRE}/
export BLOG="${CARPETA}blog"
export COMPARTIR="${CARPETA}compartir"
export NOVEDADES="${CARPETA}novedades"
export NB="nb -b $BLOG --template-dir $BLOG/templates"
export WWW="${CARPETA}www"

#---------------------- funciones graficas -----------------
function opciones {
	while getopts t:m: OPCION; do
	        case $OPCION in
	                t) TITULO=${OPTARG}
	                ;;
	                m) MENSAJE=${OPTARG}
	                ;;
	        esac
	done
	# parametros
	N=0
	for T in $(cat /dev/stdin); do
		T=$(echo $T | sed 's/_/\ /g')
		C="$C $N \"$T\""
		N=$(($N+1))
	done
	# genera el menu
	eval "zenity --title \"$TITULO\" --window-icon /usr/share/pixmaps/$NOMBRE.png --text \"$MENSAJE\" --list --height=300 --column \"\" --column \"\" --hide-column 1  --hide-header $C"
}

function error {
	zenity --error --text="$*"
}
function alerta {
	zenity --warning --text="$(cat /dev/stdin)"
}
function clave {
	zenity --title "Clave" --text "Introducir la clave" --entry --entry-text="$*"
}
function url {
	zenity --title "URL" --text "Dirección" --entry --entry-text="$*"
}
function titulo {
	zenity --title "Titulo" --text "¿Sobre que vas a hablar?" --entry --entry-text="$*"
}
function archivo {
	zenity --title "Elije el archivo" --file-selection
}
function archivos {
	echo -e "$(zenity --title "Archivos" --text="Elije los archivos" --file-selection --multiple --separator="\n" \
	|| error "si necesita un archivo" && exit)"
}
function mensaje {
	zenity --title "Mensaje" --text="Escribe el mensaje" --width=450 --height=350 --text-info --editable
}
function mostrar {
	# mensaje de entrada
	MENSAJE=`cat /dev/stdin`
	if [ "$(echo "$MENSAJE" | wc -l )" == "1" ]; then
		zenity --title "Mensaje decifrado" --width=450 --text="$*" --entry --entry-text="$MENSAJE"
	else
		echo "$MENSAJE" | zenity --title "Mensaje decifrado" --text="$*" --width=450 --height=350 --text-info
	fi
	echo "$MENSAJE" | xsel -i
}
function progreso {
	pid=`mktemp`
	zenity --progress --pulsate --auto-close --title "Espere por favor..." --text="$*" & echo $! > $pid
	cat /dev/stdin
	kill `cat $pid`
}
function blogear {
	# nanoblogger construye el blog
	$NB update all
}

function servidor_inicio {
	# inicia el servidor
	rm -f /tmp/$NOMBRE.pid
	# Si corremos arch
	[ "$(uname -r | grep ARCH)" ] && darkhttpd $WWW --port 4232 --pidfile /tmp/$NOMBRE.pid || \
	/usr/sbin/mini-httpd -i /tmp/$NOMBRE.pid -p 4232 -d "$WWW" -T "UTF8" -c "cgi-bin/*"
}
function servidor_matar {
	# matar el servidor
	[ -f /tmp/$NOMBRE.pid ] && kill "$(cat /tmp/$NOMBRE.pid)" 2> /dev/null
}

function nodo_agregar {
	URL=`cat /dev/stdin`
	rawdog -d $NOVEDADES -a "$URL" 2> /dev/null
}
function nodo_borrar {
	URL=`cat /dev/stdin`
	rawdog -d $NOVEDADES -r "$URL" 2> /dev/null
}
function nodos_lista {
	rawdog -d $NOVEDADES -l 2> /dev/null
}
function nodos_actualizar {
	N=$(rawdog -d $NOVEDADES -wu | cut -d " " -f1) 2> /dev/null
	$NB update articles
	export DISPLAY=:0
	[ ! "$N" == "0" ] && \
	notify-send -t -1 "Ciboulette" "<a href=\"http://localhost:4232/novedades\">$ID</a>$N mensajes</a>" \
	-i "${BLOG}/images/logo.png"
}


while getopts a:b:n:skdlhiuw OPCION; do
	case $OPCION in
               a)

			echo "Escriba el articulo y presione ctrl+D. Para generar otro parrafo use doble enter"
			TITULO="`echo $@ | sed 's/^-a\ //g'`"
			ARTICULO="`cat /dev/stdin`"
			echo "Publicando articulo"
			TMP=$(mktemp -d)
			$NB --title "$TITULO" --text "$ARTICULO" make-file $TMP/articulo.txt
			$NB import entry $TMP/articulo.txt

			#blogear
			exit
                ;;
                w) blogear; exit
                ;;
                n) echo ${OPTARG} | nodo_agregar; exit
                ;;
                b) echo ${OPTARG} | nodo_borrar; exit
                ;;
                l) nodos_lista; exit
                ;;
                d) nodos_actualizar; exit
                ;;
                s) servidor_matar
		   servidor_inicio
		 exit
                ;;
                k)
			servidor_matar; exit
                ;;
	u)
		NOMBRE=`basename $0`
        	AUTOR="b4zz4"
		REPO="Ciboulette"
		ZIP="master"
		cd /tmp
		# unificar estas dos lineas
		wget https://github.com/$AUTOR/$REPO/archive/$ZIP.zip -O master.zip
		rm -r $REPO-$ZIP/
		unzip master.zip
		cd $REPO-$ZIP/
		chmod +x $NOMBRE
		./$NOMBRE -i && echo "actualizado"
		exit
	;;
	h)
		echo "$(basename $0) $(cat ${CARPETA}hostname)"
		echo
		echo "  -h  esta ayuda"
		echo "  -s  iniciar el servidor"
		echo "  -k  matar el servidor"
		echo "  -u  actualizar el programa"
		echo
		echo "  -a \"Titulo de tu articulo\"		agregar articulo"
		echo "  -n http://nodociboulette.onion	agregar un nodo amigo"
		echo "  -b http://nodociboulette.onion	borrar un nodo"
		echo "  -l lisa de nodos amigos"
		echo "  -d actualizar noticias de otros nodos"
		echo "  -w forzar a actualizar tus noticias"
		echo
		exit
	;;
	i)
		[ "$(id -u)" == "0" ] && echo "No correr esto como root" && exit

		NOMBRE=`basename $0`

		# dependencias
		TMP=$(mktemp)

		# backups de tus amigxs
		[ -f "$NOVEDADES/config" ] && FEED="$(cat $NOVEDADES/config | grep "^feed ")"

		echo "instalando ciboulette"
		# como pedir permiso
		# [ "$(which sudo)" ] && gksu="gksu" || gksu="su -c"

		echo "Escribir tu clave para XMPP y presionar entrada"
		CLAVE=$(read)
		gksu "./instalar $USER \"$CLAVE\""

		# ----------------------------- INSTALACION ----------------------------------

		echo
		echo "Instalando archivos de $NOMBRE"
		echo "------------------------------"
		echo

		# Crea el directorio local y temas
		mkdir -p $CARPETA
		cp -r base/* "$CARPETA"

		if [ "$XDG_PUBLICSHARE_DIR" ]; then
			ls -s "$XDG_PUBLICSHARE_DIR" "$COMPARTIR"
			echo "Compartiendo la carpeta $XDG_PUBLICSHARE_DIR"
		else
			# crea la carpeta compartir si esta no se puede asociar a la del sistema
			mkdir $COMPARTIR &> /dev/null
		fi

		# si no existe la configuración
		if [ ! -f "~/.nb.conf" ]; then
			# agrega el idioma
			echo "NB_LANG="$(echo $LANG | cut -d'_' -f1)"" > ~/.nb.conf
		fi

		echo "$FEED" >> "$NOVEDADES/config"

		# direccion de tu ciboulette
		echo "http://$(cat /tmp/hostname)" > ${CARPETA}hostname

		mkdir ~/.config/autostart/ &> /dev/null
		cp $NOMBRE.desktop  ~/.config/autostart/

		[ -d "${CARPETA}data" ] && sh chronicle2nanoblogger

		mkdir ~/Ciboulette
		cd ~/Ciboulette

		ln -s "$BLOG/data" Blog/
		ln -s "$COMPARTIR" Compartir/
		ln -s "$NOVEDADES" Novedades/

		# inicia el servidor
		$NOMBRE -s &
		$NOMBRE -w
		$NOMBRE -d
		(crontab -l | grep -v "# Ciboulette"; echo '*/5  * * * * /usr/local/bin/ciboulette -d &>/dev/null # Ciboulette';) | crontab -
		$NOMBRE -h

		exit
		;;
	esac
done



# -------------------------- Wizard ----------------------------------

# ¿Que queres hacer?
MENU=`echo  "Publicar_un_articulo Cambiar_tu_avatar Editar_tu_perfil Leer_novedades Agrega_nodo_amigo Iniciar_Ciboulette Matar_Ciboulette Actualizar_el_programa" | opciones -t "Ciboulette" -m "Ciboulette - $(cat ${CARPETA}hostname)"`
case $MENU in
		0 )
			# Publicar articulo
			TITULO="$(titulo)"
			mensaje | ciboulette -a "$TITULO"
		;;
		1 )
			# Imagen del perfil
			ARCHIVO=$(archivo "Imagen del perfil")
			convert "$ARCHIVO" -resize 16x16 ${CARPETA}favicon.ico
			convert "$ARCHIVO" -resize 128x128 ${CARPETA}avatar.png
			qrencode "`cat {$CARPETA}hostname`" -o ${CARPETA}qr.png
			# generar respuesta
			echo "avatar actualizado" | alerta
		;;
		2)
			# Configuración del perfil
			xdg-open "${BLOG}/articles/perfil.txt"
			blogear
		;;
		3)
			# Novedades
			xdg-open "${NOVEDADES}/index.html"
		;;
		4)
			# Agregar nodo
			URL=$(url)
			$NOMBRE -n "$URL"
		;;
		5)
			# Inicia al servidor
			$NOMBRE -s
		;;
		6)
			# Mata el servidor
			$NOMBRE -k
		;;
		7)
			# Mata el servidor
			$NOMBRE -u
		;;
esac
